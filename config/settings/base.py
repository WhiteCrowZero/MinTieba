"""
Django settings for MinTieba project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
import sys

sys.path.insert(0, str(BASE_DIR / "apps"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-%-#0k5wd61irztwn33s%nf%sy#$2)#!ym)wkcna)i1sj(785*4"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "simpleui",  # 必须写在admin前面
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # others
    "rest_framework",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    # project
    "accounts",
    "forums",
    "posts",
    "interactions",
    # "operations",
    "verification",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "zh-Hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    # 异常处理
    "EXCEPTION_HANDLER": "common.exceptions.database_exception_handler",
    # 分页
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,  # 每页显示的文章数量
    # 认证
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    # 渲染器
    "DEFAULT_RENDERER_CLASSES": ("apps.common.response_renders.UnifiedJSONRenderer",),
}

# SimpleUI 配置
SIMPLEUI_DEFAULT_THEME = "admin.e-blue-pro.css"

# JWT 设置
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=3000),  # access token 30 分钟过期
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),  # refresh token 1 天过期
    "ROTATE_REFRESH_TOKENS": True,  # 刷新时颁发新的 refresh
    "BLACKLIST_AFTER_ROTATION": True,  # 旧的 refresh 失效
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
}


# 配置日志
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    # 日志格式
    "formatters": {
        "verbose": {
            "format": "[{asctime}] {levelname} {name} {message} (Process:{process:d} Thread:{thread:d})",
            "style": "{",
            "datefmt": "%Y-%m-%d %H:%M:%S",  # 添加日期格式，便于阅读
        },
        "simple": {
            "format": "{levelname}: {message}",
            "style": "{",
        },
    },
    # 日志输出
    "handlers": {
        # 控制台（开发用，生产设为WARNING）
        "console": {
            "level": "DEBUG" if DEBUG else "WARNING",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        # 所有日志（INFO+，按天旋转）
        "django_file": {
            "level": "INFO",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": str(BASE_DIR / "logs/django.log"),
            "formatter": "verbose",
            "when": "midnight",  # 每天午夜旋转
            "interval": 1,
            "backupCount": 30,  # 保留30天
            "encoding": "utf-8",
            "delay": True,
        },
        # 访问日志（专用于HTTP访问，可与Gunicorn集成）
        "access_file": {
            "level": "INFO",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": str(BASE_DIR / "logs/access.log"),
            "formatter": "verbose",
            "when": "midnight",
            "interval": 1,
            "backupCount": 30,
            "encoding": "utf-8",
            "delay": True,
        },
        # 错误日志（ERROR+）
        "error_file": {
            "level": "ERROR",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": str(BASE_DIR / "logs/error.log"),
            "formatter": "verbose",
            "when": "midnight",
            "interval": 1,
            "backupCount": 15,  # 错误日志保留15天
            "encoding": "utf-8",
            "delay": True,
        },
    },
    # 日志管理器
    "root": {
        "handlers": ["console", "django_file", "error_file"],
        "level": "WARNING",  # root默认WARNING，避免过多日志
    },
    "loggers": {
        # Django 框架日志
        "django": {
            "handlers": ["console", "django_file", "error_file"],
            "level": "INFO",
            "propagate": True,  # 传播到root
        },
        # HTTP请求日志（包括404/500）
        "django.request": {
            "handlers": ["access_file", "error_file"],
            "level": "WARNING",  # 只记录WARNING+，避免过多访问日志
            "propagate": False,  # 不传播，独立管理
        },
        # 业务日志（自定义模块，如app.feat）
        "feat": {
            "handlers": ["console", "django_file", "error_file"],
            "level": "INFO",
            "propagate": False,  # 独立，不传播到django/root
        },
    },
}

# 自定义登录校验（支持用户名或者邮箱）
AUTHENTICATION_BACKENDS = [
    "common.auth.EmailOrUsernameBackend",
]

# 指定用户模型
AUTH_USER_MODEL = "accounts.UserAccount"

import os
from dotenv import load_dotenv

env_path = BASE_DIR / "deploy" / "configs" / ".env"
load_dotenv(dotenv_path=env_path)

# 默认缓存过期时间
DEFAULT_EXPIRE_SECONDS = os.getenv("DEFAULT_EXPIRE_SECONDS", 300)
CAPTCHA_EXPIRE_SECONDS = os.getenv("CAPTCHA_EXPIRE_SECONDS", 300)
EMAIL_EXPIRE_SECONDS = os.getenv("EMAIL_EXPIRE_SECONDS", 300)

# 缓存配置
REDIS_URL = os.getenv("REDIS_BASE_URL", "redis://127.0.0.1:6379")
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"{REDIS_URL}/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
    "captcha": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"{REDIS_URL}/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
    "email": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"{REDIS_URL}/3",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
}

# 邮箱设置
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp.163.com")
EMAIL_PORT = os.getenv("EMAIL_PORT", 25)
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", "")
EMAIL_USE_TLS = True  # 是否使用TLS安全连接
# 邮箱验证回调地址
EMAIL_ACTIVATE_RETURN_URL = os.getenv("EMAIL_ACTIVATE_RETURN_URL", "")

# 默认头像URL
DEFAULT_AVATAR_URL = os.getenv("DEFAULT_AVATAR_URL", "")
